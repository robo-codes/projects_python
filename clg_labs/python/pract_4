#Write a python program which will throw an exception for divisible by zero.
'''
try:
    x = int(input("Enter Number:"))
    division = 1/x
    print("this is division : ", division)
except ZeroDivisionError as e:
    print("Infinity", e)
finally:
    print("This is finally block")
'''

#4.2 Write a python program which will throw an exception if any I/O related errors using files.
'''
try:
    file = open(input("enter file name : "),"r")
except IOError:
    print("File not found")
else:
    print("File opened successfully")
    file.close()
'''

#4.3 Write a python program which will throw an exception for valueError.
'''
try:
    x = int(input("Please enter a number: "))
    print("number is :", x)
except ValueError:
    print("NUMBER, I said !")
'''

#4.4 Write a python program which will throw user defined Exception if the number is not in the range 1 to 10.
'''
class CustomValueError(ValueError):
    def __init__(self,arg):
        self.strerror=arg
        self.args={arg}
r = int(input("enter a number : "))
try:
    if r in range(1,11) and type(r) == int:
        print("number", r,"is in range.")
    else:
        raise CustomValueError("value must be in range 1-10.")
except CustomValueError as e:
    print("CustomValueError Exception!",e.strerror)
'''

#4.5 Write a python program which will throw an exception if the value entered by user is less than zero.
'''
class CustomValueError(ValueError):
    def __init__(self,arg):
        self.strerror=arg
        self.args={arg}
r = int(input("enter a number : "))
try:
    if r > 0 :
        print("number", r,"greater than 0.")
    else:
        raise CustomValueError("value must be greater than 0.")
except CustomValueError as e:
    print("CustomValueError Exception!",e.strerror)
'''

#4.6 Write a Python program to implement the concept of inheritance.
'''
class parent:
    def __init__(self):
        print("parent constructor.")
    def P_method(self):
        print("parent method")
class child(parent):
    def __init__(self):
        print("child's constructor called.")
    def C_method(self):
        print("child method")
c = child()
c.P_method()
c.C_method()
'''

#4.7 Create a class Employee with data members: name, department and salary. Create suitable methods for reading and printing employee information.
'''
class Empoloyee():
    empCount = 0
    def __init__(self, name, department, salary):
        self.name= name
        self.department= department
        self.salary= salary
        Empoloyee.empCount += 1
    def show_info(self):
        print("\nEmployee's Details: ")
        print("Name: ", self.name,"\nsalary: ", self.department,"\nSalary: ", self.salary)
employee= []
for i in range(1,2):
    print("Enter the Details of employee: ")
    name=input("Enter Name: ")
    department=input("Enter Deparment: ")
    salary=float(input("Enter Salary: "))
    employee.append(Empoloyee(name,department,salary))
for employees in employee:
    employees.show_info()
'''

#4.8 Write a Python program to overload + operator.
'''
class sum:
    def __init__(self,x):
        self.x = x
    def __add__(self,other):
        return self.x + other.x
s = sum(3)
a = sum(5)
print(s+a)
'''

#4.9 Write a Python program that counts the number of occurrences of the character in the given string. Provide two implementations: recursive and iterative
'''
line = input("enter any sentance you like : ")
letter = input("enter the character to know it's occurance count : ")
count = 0
#iterative method
for i in range(0, len(line)):
    if line[i] == letter:
        count+=1
print("occurance is : ",count)

#recursive method
def counts(line, l, letter):
    count = 0
    r = 0
    if (r+1) < len(line):
        if line[r] == letter:
            count += 1
        r += 1
        counts(line, len(line)-r, letter)
    return count
print("count is : ", counts(line, len(line), letter))
'''

#4.10 Write a python program in which Maruti and Santro sub classes implement the abstract methods of the super class Car.
'''
from abc import ABC,abstractmethod
class car(ABC):
    @abstractmethod
    def color(self):
        pass
class maruti(car):
    def __init__(self):
        print("Maruti's object")
    def color(self, color):
        self.color=color
        print("color of Maruti is :",color)
class santro(car):
    def __init__(self):
        print("Santro's object")
    def color(self,color):
        self.color=color
        print("color of Santro is:",color)
s=santro()
m=maruti()
s.color("Red")
m.color("White")
'''

'''4.11 Create a class student with following member attributes: roll no, name, age and total marks.
Create suitable methods for reading and printing member variables. Write a python program to
overload ‘==’ operator to print the details of students having same marks.'''
'''
class Student():
    def __init__(self, r_no, name, age, marks):
        self.r_no = r_no
        self.name = name
        self.age = age
        self.marks = marks
    def displayStudent(self):
        print("Roll no is :", self.r_no, "of the student named :", self.name, "whose Age is :", self.age, "and has Marks :", self.marks)
    def __str__(self):
        return "({0},{1})".format(self.r_no, self.name, self.age, self.marks)
    def __eq__(self, other):
        if (self.marks == other.marks):
            return self.marks == other.marks
stu = {}
for i in range(1, 3):
    print("Enter Details for Student : ", i)
    r_no = int(input("Enter Roll no : "))
    name = input("Enter Name : ")
    age = int(input("Enter Age : "))
    marks = input("Enter Marks : ")
    stu[i] = (Student(r_no, name, age, marks))
for j in range(1, 3):
    if (stu[j] == stu[j + 1]) and j < 3:
        stu[j].displayStudent()
        stu[j+1].displayStudent()
    else:
        print("Marks ain't equal.")
'''

'''
#4.11 Write a Python program to create class GTU with attributes like class variable cnt, instance variables x and y, instance methods get_value and print_value.

class GTU:
    cnt = 69
    def get_value(self, x, y):
        self.x = x
        self.y = y
    def print_value(self):
        print("first Parameter :",self.x)
        print("Second Parameter :",self.y)
        print("cnt class variable :",self.cnt)
gtu_obj=GTU()
a=int(input("Enter first Parameter : "))
b=int(input("Enter Second Parameter : "))
gtu_obj.get_value(a,b)
gtu_obj.print_value()
'''

def f(n):
    if n==0 or n == 1:
        return 1
    else:
        return f(n-1) + f(n-2)
def test(n):
    for i in range(n+1):
        print(f(i))
n = int(input("enter number"))
print(test(n))
